=head1 NAME

scr2ifm -- create IFM map from game transcript

=head1 SYNOPSIS

scr2ifm [options] file [file...]

=head1 DESCRIPTION

B<scr2ifm> reads one or more transcripts of an Interactive Fiction game and
produces a map of it in B<ifm> format.  It works on Infocom-style
transcripts -- those produced by Inform- and TADS-generated games (and of
course Infocom games themselves).  For best results, you should follow a
few simple guidelines when creating your transcript (see L<"HINTS AND
TIPS">).

=head1 OPTIONS

=over 4

=item B<-c> F<file>

Append the given file of B<ifm> and parameter commands to the end of the
map.  This allows some customization of the results (see
L<"CUSTOMIZATION">).

=item B<-o> F<file>

Write output to the given file instead of stdout.

=item B<-i>

Indent the output nicely (according to my definition, anyway).  This makes
things look better if you've added 'item' and 'task' commands.  Default is
no indentation at all.

=item B<-l>

Add a comment to each B<ifm> command indicating the file and line number of
the command in the transcript file that generated it.

=item B<-w>

Don't print warnings.

=item B<-h>

Print a usage message and exit.

=back

=head1 OPERATION

B<scr2ifm> works by recognizing several key things in the transcript:

=over 4

=item *

The commands you type.  These are easy to spot, because they are preceded
by a prompt (usually ">").

=item *

When the current room changes.  This is not quite so easy, but still fairly
simple.  When you enter a new room, a short room title is printed (for
example, "West of House").  The program looks for these short titles in the
text that follows a command.  First, a line is checked for an invalid
format -- things that never appear in a title (e.g. "?" or "!").  Then the
word count is checked -- titles are hardly ever more than 7 or 8 words
long.  Finally the maximum length of an uncapitalized word is examined --
this is almost always 3 or less in titles (the length of "the").

=item *

When a previously-visited room is visited again.  This is the most
difficult thing to determine, since anything might have changed in the room
If there is a description, an exact description match is tried.  If that
fails, a substring match is attempted.  If I<that> fails, the first few
words are examined to see if they match.  If there's no description, an
exact room name match is tried.  This isn't as reliable, which is why you
should always create a transcript in 'verbose' mode (see L<"HINTS AND
TIPS">).

=item *

Special B<ifm> commands -- see L<"IFM COMMANDS">.

=back

Some of these checks can be customized -- see L<"CUSTOMIZATION">.  Output
from B<scr2ifm> is in the following format:

=over 4

=item *

First, there's a list of B<ifm> commands derived from the transcript.  Each
time a new room is seen, a room command is output for it.  Each room is
given a tag name formed by the initials of each capitalized word in its
name.  To make tags unique, the second and subsequent occurrences of a tag
name have that number appended.

If a movement command was up, down, in or out, then a compass direction is
chosen for it that doesn't clash with other rooms (if possible) and the
'go' attribute is used to mark its real direction.  If a movement command
isn't recognized, the same is done except this time the 'cmd' attribute is
used to record the command instead.

If movement is seen between two already-visited rooms, a link command is
output.  Link tags are built by concatenating the room tags of the linked
rooms with an underscore in between.  Link movement is dealt with in the
same manner as for rooms.

If the special 'item' or 'task' commands are seen (see L<"IFM COMMANDS">),
then an item or task command is output following the room that it appears
in.

=item *

Then the B<ifm> commands from the file indicated by the B<-c> option are
echoed (if any).

=back

=head1 HINTS AND TIPS

For best results with B<scr2ifm>, you should follow these guidelines when
making a transcript:

=over 4

=item *

Always use 'verbose' mode.  If you don't, then when you revisit a room
you've been in before, no description will be printed.  In that case,
B<scr2ifm> will have to rely on the room name to tell where it is.  If
there's more than one room with that name, it'll get confused (and so will
you when you look at the map!).

=item *

After starting the script, look around.  Otherwise your starting room may
not be included on the map, since the room description may not get
printed.

=item *

If there's a bend in a link (e.g. if you leave a room by going east, and
enter the next room from the south) make sure you do the return journey.
Otherwise, B<scr2ifm> won't know about the bend.

=item *

Avoid places where different rooms have the same room description
(i.e. mazes).  B<scr2ifm> can't resolve cases like this, and will assume
there's just a single room.  Note that this doesn't exclude I<all> mazes --
the 'twisty passages, all different' maze from Colossal Cave would still
work, since the descriptions are different.

=item *

If you play the game over several sessions, and create several separate
transcripts, pay attention to the starting rooms.  If a transcript starts
in a room already visited in the previous transcript, then its rooms will
be added to the same map section.  If not, a new map section will be
created (and you should use the 'map' command to give it a name -- see
L<"IFM COMMANDS">).

=back

=head1 IFM COMMANDS

While you're making your transcript, you can use a subset of B<ifm>
commands to add extra things that B<scr2ifm> will recognize.  (Of course,
the game almost certainly won't understand these commands, and will print a
suitable indignant reply.  But that shouldn't affect the state of things.)
The commands recognized are:

=over 4

=item title <name>

Give the map a title.  The name must be in double-quotes.  This command can
appear anywhere, and has the same effect each time.

=item map <name>

Indicate that the current room starts a new map section with the given
name.  The name must be in double-quotes.  This is useful if it seems like
the map divides into different sections (e.g. the floors of a house).  But
it can lead to errors if you move from one section to another via a room
that hasn't had 'map' declared on it, since B<ifm> will try to link rooms
on different map sections.

If you use the 'map' command, you'll end up with two or more map sections.
The first map section is the one that contains the very first room, and
will have a default name unless you give it one using another 'map'
command.

=item item <name> <attrs>

Declare an item in the current room.  The name must be in double-quotes.
If you don't give it a tag attribute, one is generated automatically by
changing all invalid tag characters in the name to underscores.

=item item <attrs>

Add the given attributes to the last declared item, if any.

=item item delete

Delete the last declared item, if any.

=item task <name> <attrs>

Declare a task in the current room in a similar manner to items.  The name
must be in double-quotes.

=item task <attrs>

Add the given attributes to the last declared task, if any.

=item task delete

Delete the last declared task, if any.

=back

Note that B<scr2ifm> knows almost nothing about B<ifm> command syntax.  If
there's a syntax error in a command, you'll have to manually edit the
resulting transcript (or delete the item/task and do it again).

=head1 CUSTOMIZATION

The map produced by B<scr2ifm> will not be perfect in a lot of cases.  When
running it through B<ifm> you might get warnings about overlapping rooms,
or crossed link lines.  These problems are usually fixed by stretching the
link lines of some of the rooms.

You can customize the results you get from a transcript by creating a
command file and specifying it with the B<-c> option (or, alternatively,
you can just edit the output from B<scr2ifm>).  There are two types of
customization: parameter commands and B<ifm> commands.

Parameter commands change the values of default parameters used when
scanning the transcript.  They take the form

    <parameter> = <value>

All parameters are variables with begin with a dollar symbol (actually,
they are Perl variables, and the whole line is 'eval'ed to set the
variable).  Here's a list of available parameters, and their defaults:

=over 4

=item $name_maxwords (default: 8)

Maximum no. of words in a room name.

=item $name_maxuncap (default: 3)

Maximum length of an uncapitalized word in a room name.

=item $name_invalid (default: '[.!?]')

Regexp matching an invalid room name.

=item $desc_minwords (default: 20)

Minimum no. of matching words required to match a room description.

=item $cmd_prompt (default: '^>\s*')

Regexp matching a command prompt.

=item $cmd_look (default: '^l(ook)?$')

Regexp matching a 'look' command (case-insensitive).

=item $cmd_undo (default: '^undo$')

Regexp matching an UNDO command (case-insensitive).  It's assumed that only
a single level of UNDO is available.

=item $cmd_teleport (default: '^(restart|restore)$')

Regexp matching commands that are known to cause a teleport to an arbitrary
room (case-insensitive).

=back

If a command isn't recognized as a parameter command, it's assumed to be an
B<ifm> command, and is passed straight into the output verbatim.  You can
use these to resolve conflicts in the generated map, by stretching certain
links or hiding them altogether.

=head1 RESTRICTIONS

The 'map' command can cause B<ifm> errors.

There's currently no support for mapping mazes.  Different maze rooms that
look identical will simply appear as a single room.

=head1 BUGS

I wouldn't be at all surprised.

=head1 SEE ALSO

ifm(1)

=head1 AUTHOR

Glenn Hutchings

=cut
