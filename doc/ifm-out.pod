=head1 OUTPUT FORMATS

B<IFM> has three different types of output (a map, a list of items, and a
list of tasks) and several different output formats.  Not all types of
output are produced by each output format.

=head2 Map Output

Maps are drawn in the classic Infocom style.  Rooms are drawn as boxes, and
links as are drawn as lines (oneway with an arrow).  Joins are marked by
adding a 'join number' to the room text of the joined rooms.  Non-hidden
items can be shown in their initial rooms.

The following output formats produce maps:

=over 4

=item PostScript (ps)

Several map sections may be printed per page.  Automatic packing is done to
try to get a good fit on the page.  Also, portrait or landscape is chosen
depending on whichever gives the best fit.  Fonts of room and item text are
scaled to fit them in the room boxes, if required.

To view the PostScript file on-screen, you'll need a PostScript previewer.
I recommend Ghostview, which is free and is available for most systems.
This can also print the map on your printer, even if the printer doesn't
normally print PostScript files.

=item Tk commands (tk)

This produces commands for input to B<tkifm>, a simple graphical interface
to B<IFM>.  It isn't very useful to produce this output yourself --
B<tkifm> does that internally to build its map pictures.  But you can
control its display by setting variables in the usual way.

=begin inf

See *note Tkifm:(tkifm). for a description of B<tkifm>.

=end inf

=item Raw data (raw)

This produces raw data intended for use by other programs.  Each entry
consists of a number of data lines, and is separated from other entries by
a blank line.  Each data line consists of an attribute, a colon, and its
value.  The attributes should be self-explanatory.

=back

=head2 Item List Output

The following output formats produce item lists:

=over 4

=item ASCII text (text)

This produces human-readable output.  The output should be fairly
self-explanatory.

=item Raw data (raw)

This produces raw data intended for use by other programs.  Each entry
consists of a number of data lines, and is separated from other entries by
a blank line.  Each data line consists of an attribute, a colon, and its
value.  The attributes should be self-explanatory.

=back

=head2 Task List Output

The following output formats produce task lists:

=over 4

=item ASCII text (text)

This produces human-readable output.  The output should be fairly
self-explanatory.

=item Recording commands (rec)

This output produces a list of commands suitable for feeding to IF
interpreters in playback mode.  All the commands in the output are
converted to uppercase.

In order for this to work properly, you have to give commands that the game
will understand.  The 'cmd' attribute of rooms, links, joins and tasks can
help with this.  Currently there's no item 'cmd' attribute, so you have to
make sure that the item description is recognized by the game (for get and
drop commands).  Also, if a task is implicitly done in the game without you
having to type any commands (e.g. visiting a room), you can indicate this
by using 'cmd none'.

Of course, a recording will only play back properly in an interpreter if it
provides correct game commands.  Random events can't be dealt with by
B<IFM>, and will probably cause playback to fail.  But you can work around
this with an interpreter that is able to fix the random seed at startup
(e.g. B<dumb-frotz>).  This should eliminate most (but not all) of the
problems of randomness.

=item Raw data (raw)

This produces raw data intended for use by other programs.  Each entry
consists of a number of data lines, and is separated from other entries by
a blank line.  Each data line consists of an attribute, a colon, and its
value.  The attributes should be self-explanatory.

=back

=head2 Customization

You can change the appearance of many map features according to your taste.
You do this by setting the values of the variables that control those
features.  This section tells you how to use variables -- for a complete
list of the customization variables available, see L<"Output Variables">.

As a first example, the background colour of rooms is determined by the
variable 'room_colour'.  Its default value is "white".  It can be changed
like this:

    room_colour = "beige";

Setting a variable like this will affect all output formats.  But in some
cases you don't want to do that.  A good example is the one above -- if you
don't have a colour printer, you may not want to have beige rooms printed
(they'll come out greyish).  To get around that, you can set variables that
are specific to a particular output format:

    tk room_colour = "beige";

This says to set the variable to "beige" only if producing Tk output.  The
default for all other formats is still "white".

You can also customize the appearance of individual rooms and links on the
map, by using different display styles.  A display style is just a group of
variable settings with a given name.  For example, suppose you're making a
map of Colossal Cave and want to mark rooms where you can refill your water
bottle.  You can define a style called, say, Water, like this:

    style Water;
    room_colour = "light blue";
    endstyle;

The values of variables that are set between the 'style' and 'endstyle'
clauses only apply to things drawn in that style.  Now, if you declare
rooms like this:

    room "At End Of Road";
    room "Inside Building" style Water dir e go in;

then the room "Inside Building" will be drawn with a light blue background.
You can customize individual links in a similar manner.  Note that here you
must put the 'style' clause before the 'dir' clause, so that the style
applies to the room.  If it appeared afterwards, it would apply to the
implicit link to the previous room instead.

An alternative way to define a variable in a particular style is to use the
'in style' clause, like this:

    room_colour = "light blue" in style Water;

If a style only changes a single variable, this may be more convenient.

If you assign a style (say, called B<newstyle>) to an object, but don't
define it anywhere in your input, then B<IFM> will look for a file called
F<newstyle.ifm> using the standard search path.  If the file exists, it is
expected to define style B<newstyle>.  For example, you could put the
"Water" style definition above into a file called F<Water.ifm> somewhere on
the B<IFM> search path, and it would be read automatically.  This is useful
if, for example, you want to use the same style in several different maps.

=head2 Output Variables

There are many variables available for customizing output.  At the moment,
only map output can be customized.

The names, descriptions and default values of the customization variables
are all contained in the B<IFM> initialization file.  You can change this
file to set global defaults for everybody, or alternatively set your own
preferences in your personal init file.

Here's the original initialization file that came bundled with B<IFM>.

=display ../lib/ifm-init.ifm

Previous versions of B<IFM> had two object attributes which are now
implemented as display styles: the room 'puzzle' attribute, and the link
'special' attribute.  Here's the 'puzzle' style:

=display ../lib/puzzle.ifm

And here's the 'special' style:

=display ../lib/special.ifm
