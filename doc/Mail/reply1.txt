Hi there Dave.  Just replying to a few points in your last two messages...

> Another one is that if I have:
>  task "do something" get item;
>  item "something" given score 5;
> 
> The lister doesn't give me the 5 points.  Of course I can just move the
> score option to the task but I think it would be nice if it worked in
> either place.

As it stands, that's a bug: if an item is 'given', you don't get a
'get-item' task printed, and it's that task which has the item score
attached, so the task output code doesn't add on its score.  But, thinking
about it, I've decided to print a warning if that combination (item
'given'/'score') occurs together.  The item 'score' is supposed to apply
in the game precisely when you pick that item up, but if it was given to
you then that score event would never happen in the game.

> >      * A command-line option to print verbose info on what the game
> >        solver is doing.
> 
> Actually I was going to ask for this.  Will it print out each room that
> is traversed even if no tasks are done in that room?

What a good idea!  I'll put that on my to-do list.

> In addition it would be nice to be able to have a task explicitly drop
> some/all items.

> Another thing that would be nice is a task that can be done many
> times.  The above example of reading the poetry in Curses is an example.
> Currently you need to repeat the task line exactly the number of times
> it will be repeated (with a slightly different tag).  This would
> probably be a pain in the butt to code though.

These two are complicated.  I've got some vague ideas of how to implement
them, but nothing concrete yet.

For example, with the many-times suggestion, you could have tasks that are
repeatable (i.e. once done, they are available to be done again) and
optional (i.e. it's not essential to do the task to complete the game).
The reading-poetry task above could have both of these properties.  One
problem is how to stop the game solver stupidly doing the same repeatable
task over and over, without making any progress.

Another option is to add syntax that allows you to specify many similar
tasks in a single command, with slightly differing tags.  But that doesn't
solve the real problem, it just saves typing.

> Speaking of which do you want to start a collection of *.ifm files for
> various games?  If you want I'll toss up a simple IFM web page (I haven't
> noticed an existing one) and put all the *.ifm files I make (currently 4
> complete and 3 partial) and any I'm sent there.  You could then perhaps
> mention this web page in the next release.  Either that or ask Volker to
> create a directory on gmd.

That's a very nice idea.  In fact, there is already a map directory on gmd:

       /if-archive/mapping-tools/maps

so you could download your maps to the /incoming/if-archive area with a
note to Volker.  I've got some maps of my own to add, though most of them
need more work (they were developed while testing Ifm, and so got left
unfinished while I fixed more bugs).

A web page would also be good -- they always manage to look nicer than a
list of FTP-able files.  Speaking of which, I wonder how feasible it would
be to do a HTML driver for Ifm?  Can graphics be drawn in HTML, or do you
have to resort to GIFs?

If you do set up a web page, I'd be glad to send you my finished maps to
put on it.  Ooh, fame!  I've never had anything on a WEB page before!

> +---+         +---+
> |   |         |   |
> | A |-- O/I --| B |
> |   |         |   |
> +---+         +---+

This is more difficult than it looks, due to the fact that link information
is lost by the time it gets to the map drawing stage.  But I've added it to
my 'nice-to-have' list.

>               +---+
>               |   |
>               | D |
>               |   |
>               /---+
>      /-------/
> +---/
> |   |
> | N |
> |   |
> +---+

This might be possible to implement by just indicating that the rooms are
linked, without specifying how, and getting the map builder to work out the
best way to draw the connection.  It would certainly save having to stretch
links manually to get rooms to align properly.

>        +---+
>        |   |
>      /-| A |
> +---+  |   |
> |   |  +---+
> | C |
> |   |  +---+
> +---+  |   |
>      \-| B |
>        |   |
>        +---+

Unfortunately, one fundamental assumption of Ifm is that all rooms lie on a
square grid.  But I've been playing about with some variable settings, and
came up with this:

    # Increase room size past the grid maximum.
    room_width = 1.5;
    room_height = 1.5;

    # Draw the map.
    room "Kitchen" tag Kitchen;
    room "Lounge" dir w sw;
    room "Dining Room" dir se e link Kitchen;

This gives the effect you wanted, but there are problems.  First, *all*
link sizes must be doubled or rooms overlap each other.  Second, the output
drivers assume that the maximum room size is 1 unit, so edge rooms will be
drawn outside the available space (e.g. off the canvas in tkifm).  There
may be ways to fix these problems -- for example, adding another 'link
length' variable, and getting the drivers to take the increased room size
into account.

As usual, your suggestions are much appreciated.  At the moment (when I
have time) I'm rewriting the game solver to be simpler and faster (next
version's will be a *lot* faster).  Hopefully this'll make it easier to add
more cool stuff (like repeatable tasks, when I figure them out properly).

Glenn
